Last session : GET & POST request methods with h2 db

Today's session : PUT and DELETE requests
---------------------------------------------------------------

-> If resource method wants to send data to client then we will bind that method to GET request using @GetMapping

-> If resource method wants to create a record at server using client sended information then we will bind that method to POST request using @PostMapping annotation. Post request contains request body. POST request method should return 201 as status code.

-> If resource method wants to update existing record then we will bind that method to PUT request using @PutMapping annotation. PUT request contains RequestBody

-> If resource method wants to delete existing record then we will bind that method to DELETE request using @DelteMapping annotation. DELETE request contains request body

-----------------------Students.java-------------------------
@XmlRootElement
@Data
@XmlAccessorType(XmlAccessType.FIELD)
public class Students {

	@XmlElement(name = "student")
	@JsonProperty("student")
	private List<Student> students;

}
------------------------Student.java---------------------------

@Entity
@Table(name = "STUDENT_DTLS")
@Data
@XmlRootElement
public class Student {

	@Id
	@GeneratedValue
	private Integer sid;
	private String sname;
	private Integer marks;

}
----------------------StudentRestController.java--------------
@RestController
public class StudentRestController {

	@Autowired
	private StudentRepository stuRepo;

	@PostMapping(value = "/add", consumes = { "application/xml", "application/json" })
	public ResponseEntity<String> addStudent(@RequestBody Student student) {
		Student savedEntity = stuRepo.save(student);
		String response = "Student Saved With ID as : " + savedEntity.getSid();
		return new ResponseEntity<>(response, HttpStatus.CREATED);
	}

	@GetMapping(value = "/get/{sid}", produces = { "application/xml", "application/json" })
	public ResponseEntity<Student> getStudent(@PathVariable("sid") Integer sid) {
		Student s = null;
		Optional<Student> findById = stuRepo.findById(sid);
		if (findById.isPresent()) {
			s = findById.get();
		} else {
			// throw Exception (Nodata found)
		}
		return new ResponseEntity<>(s, HttpStatus.OK);
	}

	@GetMapping(value = "/students", produces = { "application/xml", "application/json" })
	public ResponseEntity<Students> getStudents() {
		
		List<Student> students = stuRepo.findAll();

		Students stds = new Students();
		stds.setStudents(students);

		return new ResponseEntity<>(stds, HttpStatus.OK);

	}

	@PutMapping(value = "/update", consumes = { "application/json", "application/xml" })
	public ResponseEntity<String> updateStudent(@RequestBody Student student) {
		stuRepo.save(student);
		String msg = "Record Updated Successfully..!!";
		return new ResponseEntity<>(msg, HttpStatus.OK);
	}

	@DeleteMapping(value = "/delete/{sid}")
	public ResponseEntity<String> deleteStudent(@PathVariable("sid") Integer sid) {
		stuRepo.deleteById(sid);
		String msg = "Record Deleted With Student ID : " + sid;
		return new ResponseEntity<>(msg, HttpStatus.OK);
	}
}
---------------------------------------------------------------
